<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" frameRate="60" fontFamily="Microsoft Yahei" fontSize="11" 
					   xmlns:s="library://ns.adobe.com/flex/spark" title="{AppData.appTitle}"
					   xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="init()" addedToStage="addedToStageHandler(event)"
					   showStatusBar="true" status="{AppParticleData.statusString}"
					   width="1600" height="800" backgroundAlpha="0" xmlns:view="view.*" xmlns:config="view.config.*" xmlns:countView="view.countView.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
		<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		mx|VScrollBar{
			chromeColor: #2d2d2d;
		}
		mx|HScrollBar{
			chromeColor: #2d2d2d;
		}
		mx|Button{
			chromeColor: #2d2d2d;
			color: #9f9f9f;
			textRollOverColor:#9f9f9f;
		}
		mx|ComboBox{
			chromeColor: #2d2d2d;
			color:#9f9f9f;
			alternatingItemColors:#505050;
		}
		mx|ToolTip{
			font-family:            verdana;
			font-size:              12px;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import flash.display3D.Context3D;
			
			import mx.controls.Alert;
			import mx.events.FlexNativeMenuEvent;
			
			import PanV2.ConfigV2;
			
			import _Pan3D.light.LightVo;
			import _Pan3D.lineTri.LineTri3DSprite;
			import _Pan3D.particle.ctrl.ParticleManager;
			import _Pan3D.program.Program3DManager;
			import _Pan3D.role.MeshDataManager;
			import _Pan3D.scene.postprocess.PostProcessManager;
			import _Pan3D.texture.TextureManager;
			
			import _me.Scene_data;
			
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
			
			import common.AppData;
			import common.GameUIInstance;
			
			import manager.LayerManager;
			import manager.MouseManager;
			
			import renderLevel.SceneLevel;
			
			import view.AllAttributePanle;
			import view.ControlCenterView;
			import view.materials.MaterialParamView;
			import view.menu.MainProcess;
			import view.scene.ScenePropView;
			
			import xyz.MoveScaleRotationLevel;
			
			private var context3D:Context3D;
			
			private function init():void{
				checkForUpdate();
			}
			/** 设置初始3化模式 */
			protected function addedToStageHandler(event:Event):void
			{
				
				
				Scene_data.mainScale=2;
				Scene_data.effectsLev = 2;
				stage.scaleMode = StageScaleMode.NO_SCALE;
				stage.align = StageAlign.TOP_LEFT; 
				initScene();
				
				
				//new FpsView(stage,0,20);
				
				
				Scene_data.isDevelop = true;
				
				Scene_data.sourceObj = true;
				
				Scene_data.light=new LightVo;
				Scene_data.light.Envscale = 1;
				
				
				// CurvesUI.getInstance().show(null);
				
				AppParticleData.showGrid = true;
				
				//getDbInfoNew();
			}
			/** 初始化3d场景 */
			private function initScene():void{
				Scene_data.stage=this.stage;
				//Scene_data.fileRoot="assets/";
				
				//Config.init(stage, _config_end);
				LineTri3DSprite.thickNessScale=5
				ConfigV2.getInstance().init(stage, _config_end);
			}
			private var _sceneView:SceneLevel;
			/** 设置场景中各项模式 */		
			private function _config_end():void
			{
				Program3DManager.getInstance().initReg();
				
				this.context3D = Scene_data.context3D;
				MeshDataManager.getInstance().init(this.context3D);
				TextureManager.getInstance().init(this.context3D);
				PostProcessManager.getInstance().init(this.context3D);
				MoveScaleRotationLevel.getInstance().initContext3D(this.context3D,Scene_data.stage,1,true)
				
				
				
				_sceneView=new SceneLevel;
				_sceneView.initData();
				
				ParticleManager.getInstance();
				
				startRender();
				
				
				stage.addEventListener(Event.RESIZE,onStageResize);
				onStageResize()
				
				initParticleView();
				
				
			}
			private function startRender():void{
				this.addEventListener(Event.ENTER_FRAME,renderScene);
			}
			/** 主渲染 */
			private function renderScene(event:Event=null):void{
				_sceneView.upData();
			}
			
			/** 场景大小改变 场景视口改变 */
			private function onStageResize(event:Event=null):void{
				if(stage.stageWidth == 0 || stage.stageHeight == 0){
					return;
				}
				Scene_data.stageWidth = stage.stageWidth;
				Scene_data.stageHeight = stage.stageHeight;
				
				
				Scene_data.stage3DVO.width=Scene_data.stageWidth ;
				Scene_data.stage3DVO.height=Scene_data.stageHeight ;
				
				
				Scene_data.cam3D.fovw=Scene_data.stageWidth;
				Scene_data.cam3D.fovh=Scene_data.stageHeight;
				_sceneView.stageResize();
				math2Ddata();
				
				LayerManager.getInstance().changeSize();
				
				PostProcessManager.getInstance().resize(stage.stageWidth,stage.stageHeight);
				
			}
			
			public function math2Ddata():void
			{
				Scene_data.sw2D=1000*Scene_data.mainScale/Scene_data.stageWidth
				Scene_data.tx2D=-Scene_data.stageWidth/Scene_data.mainScale;
				Scene_data.sinAngle2D=Math.sin(Math.abs(Scene_data.focus3D.angle_x)*Math.PI/180);
				Scene_data.ty2D=Scene_data.stageHeight/Scene_data.mainScale/Scene_data.sinAngle2D;
			}
			
			private function roll():void{
				AppParticleData.particle3DFacet.rotationXYZangle(0,0,0);
				AppParticleData.particle3DFacet.rotationNum++;
				AppParticleData.particle3DFacet.rotationByAxis();
			}
			/**
			 * 初始化面板信息
			 * */
			private function initParticleView():void{
				
				initView();
				_mainProcess = new MainProcess;
				_mainProcess.setApp(this);
				
				scenePropView.readObj();
				
			}
			
			private function initView():void{
				GameUIInstance.stage = this.stage;
				GameUIInstance.uiContainer = rootUI;
				GameUIInstance.layoutBottom = layoutBottom;
				GameUIInstance.layoutTop = layoutTop;
				GameUIInstance.application = this;
				
				LayerManager.getInstance().testNodeTree();
				
				MouseManager.initMouse();
				
				
				var center:ControlCenterView = ControlCenterView.getInstance();
				center.init(null,"控制",1);
				LayerManager.getInstance().addPanel(center);
				
				scenePropView = new ScenePropView(); 
				scenePropView.init(null,"场景参数",2);
				LayerManager.getInstance().addPanel(scenePropView);
				
				//scenePropView.readObj();
				
				var materialParamview:MaterialParamView = MaterialParamView.getInstance();
				materialParamview.init(null,"材质参数",2);
				LayerManager.getInstance().addPanel(materialParamview);
				
				var allAttributePanle:AllAttributePanle = AllAttributePanle.getInstance();
				allAttributePanle.init(null,"粒子属性",4);
				LayerManager.getInstance().addPanel(allAttributePanle);
				
				
			}
			
			/** 检查程序版本更新 */
			private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
			private function checkForUpdate():void {    
				appUpdater.updateURL = "http://www.h5key.com/airupdate/ParticleTools/output/update.xml";   
				appUpdater.isCheckForUpdateVisible = false;
				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);  
				appUpdater.addEventListener(ErrorEvent.ERROR, onError);  
				appUpdater.initialize();
			}
			private function onError(event:ErrorEvent):void {   
				Alert.show(event.toString());   
			}   
			private function onUpdate(event:UpdateEvent):void {   
				appUpdater.checkNow();  
			}
			
			
			private var _mainProcess:MainProcess;
			
			private var scenePropView:ScenePropView;
			protected function itemClickHandler(event:FlexNativeMenuEvent):void
			{
				_mainProcess.processEvent(event);
			}
			
		]]>
	</fx:Script>
	<!--<view:ParticleAttributePanle x="0" top="50" bottom="0" visible="false"/>-->
	<!--<view:AllAttributePanle id="attributePanle" x="0" top="50" bottom="0"/>-->
	<!--	<mx:Canvas id="centerCav" width="1006" height="208" y="50" left="308" right="10">
	<view:ControlCenterView/>
	</mx:Canvas>-->
	
	<mx:UIComponent id="axisUI"/>
	<!--<view:FileToolBar width="100%" id="filetoolBar" visible="false"/>-->
	<!--<mx:Canvas right="0" bottom="40" width="280" height="38">
	<mx:CheckBox id="attVis" x="10" y="10" label="显示属性" color="#FFFFFF" enabled="true"
	selected="true"/>
	<mx:CheckBox id="timelineVis" x="95" y="10" label="显示时间轴" color="#FFFFFF" enabled="true"
	selected="true"/>
	<mx:CheckBox id="showGrid" x="186" y="10" label="显示网格" color="#FFFFFF" enabled="true" click="showGrid_clickHandler(event)"
	selected="true"/>
	</mx:Canvas>-->
	<!--<countView:CountPanle right="0" bottom="0"/>-->
	<!--<config:ConfigPanle right="10" bottom="80" id="cfg" visible="false"/>-->
	<!--<mx:UIComponent id="ui"/>-->
	
	<mx:Canvas width="100%" height="100%" id="rootUI" horizontalScrollPolicy="off" verticalScrollPolicy="off" />
	
	<mx:Canvas width="100%" height="100%">
		<mx:UIComponent id="layoutBottom" visible="false"/>
		<mx:UIComponent id="layoutTop"/>
	</mx:Canvas>
	
	<!--<mx:menu>
	<mx:FlexNativeMenu dataProvider="{MenuData.myMenuData}"  itemClick="itemClickHandler(event)"
	labelField="@label" 
	showRoot="false"/>
	</mx:menu>-->
	
</s:WindowedApplication>
